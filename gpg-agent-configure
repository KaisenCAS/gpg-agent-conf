#!/bin/bash

#This script automates the configuration of the gpg agent to cache passphrases.
#This script was used and tested on a CLI server.
#You can use it on a server to automate a task that requires interaction with GPG.
#We assume here that the private/public key pair has been generated and that the folder ~/.gnupg exists.
#Tested with gpg-agent version 2.2.12

set -e

#Check run at no superuser

if [[ "$EUID" -eq 0 ]]; then
	echo -e "Run this script as no root"
	exit 1
fi

#Export GPG_TTY variable in ~/.bashrc

cat << EOF >> ~/.bashrc
#GPG agent
GPG_TTY=$(tty)
export GPG_TTY
EOF

#Configure agent options use

mkdir ~/.gnupg || true
touch ~/.gnupg/gpg-agent.conf
cat << EOF > ~/.gnupg/gpg-agent.conf
default-cache-ttl 315360000
max-cache-ttl 315360000
pinentry-program /usr/bin/pinentry-curses
allow-preset-passphrase
pinentry-timeout 0
EOF

#default-cache-ttl sets the default cache phrase length for the passphrase (in seconds, here 10 years)
#max-cache-ttl sets the maximum cache phrase length for the passphrase (in seconds, here 10 years)
#pinentry-program defines the software to use to enter the passphrase
#allow-preset-passphrase reads the previously used stdin entry
#pinentry-timeout 0 to disable timeout in pintentry

cat << EOF > ~/.gnupg/gpg.conf
use-agent
EOF

#See : https://www.gnupg.org/documentation/manuals/gnupg/Agent-Configuration.html#Agent-Configuration
#For details for gpg-agent.conf gpg.conf trustlist.txt files

#Create script to launch and stop gpg-agent

cat << EOF > /opt/gpg-agent
#!/bin/bash

set -e

if [[ "$EUID" -eq "0" ]]; then
	echo "Run this script as non root"
	exit 1
fi

function start() {
for users in $(awk -F: '/\/home/ {printf "%s:%s\n",$1,$3}' /etc/passwd | cut -d: -f1)
do
rm -f /home/$users/S.* || true
done
rm -f /run/user/*/gnupg/S.* || true
gpg-agent --daemon
}

function stop() {
gpgconf --kill gpg-agent
}

function explain() {
	echo "Launch script this with argument start or stop."
}

case $1 in
	start)
		start
	;;
	stop)
		stop
	;;
	*)
	explain
	;;
esac
EOF

chmod 0755 /opt/gpg-agent
chown user:user /opt/gpg-agent

cat << EOF > /etc/systemd/system/gpg-agent.service
[Unit]
Description=Mise en cache de cl√© GPG

[Service]
User=kaisen
Group=kaisen
Type=forking
RemainAfterExit=yes
ExecStart=/opt/gpg-agent start
ExecStop=/opt/gpg-agent stop

[Install]
WantedBy=multi-user.target
EOF

systemctl enable gpg-agent
systemctl start gpg-agent

#Once this configuration is done, enter your passphrase and disconnect from your SSH session for 10 minutes.
#Rerun a command requiring interaction with GPG, if the phrase is not asked again, your configuration is functional.
